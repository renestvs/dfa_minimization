from epsElimination import epsElim

export function infiniteLanguage(A)
    A := epsElim(A)

    let trans := A.getTransitionFunction()

    function onCycle(consideredState, visited, curState)
        if visited contains curState then
            return false
        end if

        visited.add(curState)

        foreach state in A.getSuccessors(curState) do
            if state = consideredState or onCycle(consideredState, visited.copy(), state) then
                return true
            end if
        done

        return false
    end function

    function visit(state, visited, cycle)
        if visited contains state then
            return false
        end if

        if not cycle then
            cycle := onCycle(state, {}, state)
        end if

        if cycle and A.isFinalState(state) then
            return true
        end if

        visited.add(state)

        foreach destState in A.getSuccessors(state) do
            if visit(destState, new Set(visited), cycle) then
                return true
            end if
        done

        return false
    end function

    return visit(A.getInitialState(), {}, false)
end function

run(infiniteLanguage, get_automaton(currentAutomaton))
